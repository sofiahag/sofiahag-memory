[{"/Users/Fia/opt/sofiahag-memory/src/index.js":"1","/Users/Fia/opt/sofiahag-memory/src/reportWebVitals.js":"2","/Users/Fia/opt/sofiahag-memory/src/App.js":"3","/Users/Fia/opt/sofiahag-memory/src/components/Memory.jsx":"4","/Users/Fia/opt/sofiahag-memory/src/assets/cards/cards.js":"5"},{"size":535,"mtime":1694958288335,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1694958035022,"results":"8","hashOfConfig":"7"},{"size":166,"mtime":1694958246000,"results":"9","hashOfConfig":"7"},{"size":4268,"mtime":1694958352728,"results":"10","hashOfConfig":"7"},{"size":452,"mtime":1694958441665,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qieget",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Fia/opt/sofiahag-memory/src/index.js",[],[],"/Users/Fia/opt/sofiahag-memory/src/reportWebVitals.js",[],[],"/Users/Fia/opt/sofiahag-memory/src/App.js",[],[],"/Users/Fia/opt/sofiahag-memory/src/components/Memory.jsx",["28"],[],"import { useEffect, useState } from \"react\"\nimport { pics } from \"../assets/cards/cards\"\nimport lightBackCard from \"../assets/uni-back-light.png\"\nimport darkBackCard from \"../assets/uni-back-dark.png\"\nimport lightToggle from \"../assets/day.png\";\nimport darkToggle from \"../assets/night.png\";\n\nfunction Game() {\n\n    const [theme, setTheme] = useState('light');\n    const [picsArray, setpicsArray] = useState([])\n    const [cardsPicked, setCardsPicked] = useState([])\n    const [cardsPickedIds, setCardsPickedIds] = useState([])\n    const [creds, setCreds] = useState(0)\n    const [flippedCards, setFlippedCards] = useState([])\n\n    const toggleTheme = () => {\n        if (theme === 'light') {\n          setTheme('dark');\n        } else {\n          setTheme('light');\n        }\n    };\n\n    function createCardBoard() {\n        const picsGenerated = pics?.concat(...pics)\n        const shuffledArray = shuffleArray(picsGenerated)\n        setpicsArray(shuffledArray)\n    }\n\n    function flipPic(pic, index) {\n\n        if (cardsPickedIds?.length === 1 && cardsPickedIds[0] === index) {\n            return\n        }\n\n        if (cardsPicked?.length < 2) {\n\n            setCardsPicked(cardsPicked => cardsPicked?.concat(pic))\n            setCardsPickedIds(cardsPickedIds => cardsPickedIds?.concat(index))\n\n            if (cardsPicked?.length === 1) {\n                if (cardsPicked[0] === pic) {\n                    setCreds(creds => creds + 2)\n                    setFlippedCards(flippedCards => flippedCards?.concat([cardsPicked[0], pic]))\n                }\n                setTimeout(() => {\n                    setCardsPickedIds([])\n                    setCardsPicked([])\n                }, 2000)\n                \n            } \n        }\n    }\n\n    function isCardPicked(pic, index) {\n        return cardsPickedIds?.includes(index) || flippedCards?.includes(pic)\n    }\n\n    function shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array\n    }\n\n    function startOver() {\n        setCardsPickedIds([])\n        setCardsPicked([])\n        setCreds(0)\n        setFlippedCards([])\n    }\n\n    useEffect(() => {\n        document.body.className = theme;\n    }, [theme]);\n\n    useEffect(() => {\n        createCardBoard()\n    }, [])\n\n    return (\n        <div className=\"md:h-screen md:flex md:items-center md:justify-center\">\n            <div className=\"columns-1 ml-12 mr-5 max-sm:columns-2 max-sm:justify-center max-sm:my-5 max-sm:flex max-sm:items-center \n                max-sm:ml-0 max-sm:mr-0\">\n                <h3 className=\"mb-4 ml-3 font-sofia text-lg dark:text-white max-sm:ml-0 max-sm:mr-2 max-sm:mt-3 max-sm:text-base\">\n                    Creds: {creds}\n                </h3>\n                <button className=\"font-sofia bg-gradient-to-r from-teal-400 via-cyan-600 to-cyan-400\n                  dark:from-pink-300 dark:via-yellow-200 dark:to-pink-200 dark:border-yellow-200 py-3 px-5\n                  border-cyan-600 border-2 rounded-full text-base text-white font-bold dark:text-black\n                  max-sm:py-1 max-sm:px-3\" onClick={startOver}>Start over\n                </button>\n            </div>\n            <div className=\"grid lg:grid-cols-6 gap-4 m-12 md:grid-cols-4 max-sm:grid-cols-4 max-sm:gap-2 max-sm:m-3 max-sm:mt-3\">\n            <h2 className=\"flex items-center justify-center font-mooli text-2xl max-md:text-xs gradient-text\">\n                Unicorn<br></br>Memory\n            </h2>\n            {picsArray?.map((pic, index) => {\n                return (\n                    <div key={index} onClick={() => flipPic(pic, index)}>\n                        <img src={isCardPicked(pic, index) ? pic : theme === \"light\" ? lightBackCard : darkBackCard} \n                            alt=\"mem_card\" className={`rounded-lg`} \n                        />\n                    </div>\n                )\n            })}\n             <button className=\"toggle text-xs dark:text-white\" onClick={() => toggleTheme()}>\n                <img src={theme === \"light\" ? lightToggle : darkToggle } alt=\"toggle\" />\n            </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Game;\n","/Users/Fia/opt/sofiahag-memory/src/assets/cards/cards.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":81,"column":8,"nodeType":"31","endLine":81,"endColumn":10,"suggestions":"32"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createCardBoard'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [createCardBoard]",{"range":"36","text":"37"},[2387,2389],"[createCardBoard]"]